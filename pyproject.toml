[project]
name = "mcp-agentic-rag"
version = "0.1.0"
description = "MCP server for intelligent RAG with vector database and web search fallback"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "MCP Agentic RAG Team", email = "team@example.com"}
]
keywords = ["mcp", "rag", "vector-search", "web-search", "ai", "retrieval"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "httpx>=0.28.1",
    "sentence-transformers>=2.2.0",
    "mcp[cli]>=1.14.1",
    "python-dotenv>=1.1.1",
    "qdrant-client[fastembed]>=1.15.1",
    "pydantic>=2.0.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "tqdm>=4.65.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "black>=23.0.0",
    "einops>=0.8.1",
]

[project.optional-dependencies]
dev = [
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.0.0",
    "coverage[toml]>=7.0.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
mcp-agentic-rag = "mcp_agentic_rag.server.mcp_server:main"
validate-rag = "cli.validate:main"

[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/mcp_agentic_rag",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "-v",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "contract: marks tests as contract tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.12"
packages = ["src/mcp_agentic_rag", "src/cli"]
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[tool.ruff]
target-version = "py312"
line-length = 79

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
per-file-ignores = {"tests/*" = ["D", "S101", "PLR2004"]}

[tool.black]
line-length = 79
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
